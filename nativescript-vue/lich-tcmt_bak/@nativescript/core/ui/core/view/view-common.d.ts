import { View as ViewDefinition, Point, Size, dip } from '.';
import { ShowModalOptions, ViewBase } from '../view-base';
import { Color } from '../../../color';
import { Property, InheritedProperty } from '../properties';
import { EventData } from '../../../data/observable';
import { HorizontalAlignment, VerticalAlignment, Visibility, Length, PercentLength, BackgroundRepeat } from '../../styling/style-properties';
import { GesturesObserver, GestureTypes, GestureEventData } from '../../gestures';
import { LinearGradient } from '../../styling/linear-gradient';
import { TextTransform } from '../../text-base';
import * as am from '../../animation';
export * from './view-helper';
export declare function CSSType(type: string): ClassDecorator;
export declare function viewMatchesModuleContext(view: ViewDefinition, context: ModuleContext, types: ModuleType[]): boolean;
export declare function PseudoClassHandler(...pseudoClasses: string[]): MethodDecorator;
export declare const _rootModalViews: ViewBase[];
export declare abstract class ViewCommon extends ViewBase implements ViewDefinition {
    static layoutChangedEvent: string;
    static shownModallyEvent: string;
    static showingModallyEvent: string;
    protected _closeModalCallback: Function;
    _manager: any;
    _modalParent: ViewCommon;
    private _modalContext;
    private _modal;
    private _measuredWidth;
    private _measuredHeight;
    protected _isLayoutValid: boolean;
    private _cssType;
    private _localAnimations;
    _currentWidthMeasureSpec: number;
    _currentHeightMeasureSpec: number;
    _setMinWidthNative: (value: Length) => void;
    _setMinHeightNative: (value: Length) => void;
    _gestureObservers: {};
    get css(): string;
    set css(value: string);
    addCss(cssString: string): void;
    addCssFile(cssFileName: string): void;
    changeCssFile(cssFileName: string): void;
    _updateStyleScope(cssFileName?: string, cssString?: string, css?: string): void;
    private setScopeProperty;
    _closeAllModalViewsInternal(): boolean;
    _getRootModalViews(): Array<ViewBase>;
    _onLivesync(context?: ModuleContext): boolean;
    _handleLivesync(context?: ModuleContext): boolean;
    _setupAsRootView(context: any): void;
    _observe(type: GestureTypes, callback: (args: GestureEventData) => void, thisArg?: any): void;
    getGestureObservers(type: GestureTypes): Array<GesturesObserver>;
    addEventListener(arg: string | GestureTypes, callback: (data: EventData) => void, thisArg?: any): void;
    removeEventListener(arg: string | GestureTypes, callback?: any, thisArg?: any): void;
    onBackPressed(): boolean;
    _getFragmentManager(): any;
    private getModalOptions;
    showModal(): ViewDefinition;
    closeModal(...args: any[]): void;
    get modal(): ViewCommon;
    protected _showNativeModalView(parent: ViewCommon, options: ShowModalOptions): void;
    protected abstract _hideNativeModalView(parent: ViewCommon, whenClosedCallback: () => void): any;
    protected _raiseLayoutChangedEvent(): void;
    protected _raiseShownModallyEvent(): void;
    protected _raiseShowingModallyEvent(): void;
    private _isEvent;
    private _disconnectGestureObservers;
    get borderColor(): string | Color;
    set borderColor(value: string | Color);
    get borderTopColor(): Color;
    set borderTopColor(value: Color);
    get borderRightColor(): Color;
    set borderRightColor(value: Color);
    get borderBottomColor(): Color;
    set borderBottomColor(value: Color);
    get borderLeftColor(): Color;
    set borderLeftColor(value: Color);
    get borderWidth(): string | Length;
    set borderWidth(value: string | Length);
    get borderTopWidth(): Length;
    set borderTopWidth(value: Length);
    get borderRightWidth(): Length;
    set borderRightWidth(value: Length);
    get borderBottomWidth(): Length;
    set borderBottomWidth(value: Length);
    get borderLeftWidth(): Length;
    set borderLeftWidth(value: Length);
    get borderRadius(): string | Length;
    set borderRadius(value: string | Length);
    get borderTopLeftRadius(): Length;
    set borderTopLeftRadius(value: Length);
    get borderTopRightRadius(): Length;
    set borderTopRightRadius(value: Length);
    get borderBottomRightRadius(): Length;
    set borderBottomRightRadius(value: Length);
    get borderBottomLeftRadius(): Length;
    set borderBottomLeftRadius(value: Length);
    get color(): Color;
    set color(value: Color);
    get background(): string;
    set background(value: string);
    get backgroundColor(): Color;
    set backgroundColor(value: Color);
    get backgroundImage(): string | LinearGradient;
    set backgroundImage(value: string | LinearGradient);
    get backgroundSize(): string;
    set backgroundSize(value: string);
    get backgroundPosition(): string;
    set backgroundPosition(value: string);
    get backgroundRepeat(): BackgroundRepeat;
    set backgroundRepeat(value: BackgroundRepeat);
    get minWidth(): Length;
    set minWidth(value: Length);
    get minHeight(): Length;
    set minHeight(value: Length);
    get width(): PercentLength;
    set width(value: PercentLength);
    get height(): PercentLength;
    set height(value: PercentLength);
    get margin(): string | PercentLength;
    set margin(value: string | PercentLength);
    get marginLeft(): PercentLength;
    set marginLeft(value: PercentLength);
    get marginTop(): PercentLength;
    set marginTop(value: PercentLength);
    get marginRight(): PercentLength;
    set marginRight(value: PercentLength);
    get marginBottom(): PercentLength;
    set marginBottom(value: PercentLength);
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(value: HorizontalAlignment);
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(value: VerticalAlignment);
    get visibility(): Visibility;
    set visibility(value: Visibility);
    get opacity(): number;
    set opacity(value: number);
    get rotate(): number;
    set rotate(value: number);
    get rotateX(): number;
    set rotateX(value: number);
    get rotateY(): number;
    set rotateY(value: number);
    get perspective(): number;
    set perspective(value: number);
    get textTransform(): TextTransform;
    set textTransform(value: TextTransform);
    get translateX(): dip;
    set translateX(value: dip);
    get translateY(): dip;
    set translateY(value: dip);
    get scaleX(): number;
    set scaleX(value: number);
    get scaleY(): number;
    set scaleY(value: number);
    get androidElevation(): number;
    set androidElevation(value: number);
    get androidDynamicElevationOffset(): number;
    set androidDynamicElevationOffset(value: number);
    automationText: string;
    originX: number;
    originY: number;
    isEnabled: boolean;
    isUserInteractionEnabled: boolean;
    iosOverflowSafeArea: boolean;
    iosOverflowSafeAreaEnabled: boolean;
    get isLayoutValid(): boolean;
    get cssType(): string;
    set cssType(type: string);
    get isLayoutRequired(): boolean;
    measure(widthMeasureSpec: number, heightMeasureSpec: number): void;
    layout(left: number, top: number, right: number, bottom: number): void;
    getMeasuredWidth(): number;
    getMeasuredHeight(): number;
    getMeasuredState(): number;
    setMeasuredDimension(measuredWidth: number, measuredHeight: number): void;
    requestLayout(): void;
    abstract onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
    abstract onLayout(left: number, top: number, right: number, bottom: number): void;
    abstract layoutNativeView(left: number, top: number, right: number, bottom: number): void;
    static resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number;
    static combineMeasuredStates(curState: number, newState: any): number;
    static layoutChild(parent: ViewDefinition, child: ViewDefinition, left: number, top: number, right: number, bottom: number, setFrame?: boolean): void;
    static measureChild(parent: ViewCommon, child: ViewCommon, widthMeasureSpec: number, heightMeasureSpec: number): {
        measuredWidth: number;
        measuredHeight: number;
    };
    _setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean;
    _getCurrentLayoutBounds(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
    };
    /**
     * Returns two booleans - the first if "boundsChanged" the second is "sizeChanged".
     */
    _setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): {
        boundsChanged: boolean;
        sizeChanged: boolean;
    };
    eachChild(callback: (child: ViewBase) => boolean): void;
    eachChildView(callback: (view: ViewDefinition) => boolean): void;
    _getNativeViewsCount(): number;
    _eachLayoutView(callback: (View: any) => void): void;
    focus(): boolean;
    getSafeAreaInsets(): {
        left: any;
        top: any;
        right: any;
        bottom: any;
    };
    getLocationInWindow(): Point;
    getLocationOnScreen(): Point;
    getLocationRelativeTo(otherView: ViewDefinition): Point;
    getActualSize(): Size;
    animate(animation: any): am.AnimationPromise;
    createAnimation(animation: any): am.Animation;
    _removeAnimation(animation: am.Animation): boolean;
    resetNativeView(): void;
    _setNativeViewFrame(nativeView: any, frame: any): void;
    _getValue(): never;
    _setValue(): never;
    _updateEffectiveLayoutValues(parentWidthMeasureSize: number, parentWidthMeasureMode: number, parentHeightMeasureSize: number, parentHeightMeasureMode: number): void;
    _setNativeClipToBounds(): void;
    _redrawNativeBackground(value: any): void;
    _onAttachedToWindow(): void;
    _onDetachedFromWindow(): void;
    _hasAncestorView(ancestorView: ViewDefinition): boolean;
}
export declare const automationTextProperty: Property<ViewCommon, string>;
export declare const originXProperty: Property<ViewCommon, number>;
export declare const originYProperty: Property<ViewCommon, number>;
export declare const isEnabledProperty: Property<ViewCommon, boolean>;
export declare const isUserInteractionEnabledProperty: Property<ViewCommon, boolean>;
export declare const iosOverflowSafeAreaProperty: Property<ViewCommon, boolean>;
export declare const iosOverflowSafeAreaEnabledProperty: InheritedProperty<ViewCommon, boolean>;
